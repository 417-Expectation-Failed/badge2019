#!/bin/bash
#
# This file is part of badge2019.
# Copyright 2019 Emil Renner Berthing <esmil@labitat.dk>
#
# badge2019 is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# badge2019 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with badge2019. If not, see <http://www.gnu.org/licenses/>.

set -e

readonly URL='https://bornhack.dk/bornhack-2019/program/ics/'

time_to_unix() {
  local ts="${1//T/ }"
  date -d "${ts%??Z} UTC" '+%s'
}

declare -a summary
declare -a location
declare -a tstart
declare -a tend

i=0
while read -r line; do
  case "$line" in
  'BEGIN:VCALENDAR')
    ;;
  'BEGIN:VEVENT')
    ;;
  'END:VEVENT')
    i=$((i+1))
    ;;
  'END:VCALENDAR')
    break;;
  'SUMMARY:'*)
    summary[$i]="$(echo "${line#SUMMARY:}" | sed "s/æ/ae/g;s/ø/oe/g;s/å/aa/g;s/’/'/g;s/–/-/g")";;
  'LOCATION:'*)
    location[$i]="${line#LOCATION:}";;
  'DTSTART:'*)
    tstart[$i]="$(time_to_unix "${line#DTSTART:}")";;
  'DTEND:'*)
    tend[$i]="$(time_to_unix "${line#DTEND:}")";;
  'DESCRIPTION:'*)
    ;;
  *)
    echo "Don't know '$line'" >&2;;
  esac
done < <(curl -s "$URL" | sed -ne ':a;$!N;s/\n //;ta;s/\r//g;s/\\,/,/g;P;D')

readonly N=$i

declare -a sorted
i=0
while read -r e; do
  e="${e##* }"
  sorted[$i]=$e
  i=$((i+1))
done < <(
  for ((i=0;i < N; i++)); do
    echo "${tstart[$i]} $i"
  done | sort
)

echo '/* generated by the ics script from badge2019 */'
echo

for ((i=0; i < N; i++)); do
  e=${sorted[$i]}
  echo "static const char *event$i[] = {"
  LC_TIME='C' printf '\t"%.3(%A)T  %(%H:%M)T-%(%H:%M)T",\n' \
    "${tstart[$e]}" "${tstart[$e]}" "${tend[$e]}"
  printf '\t"%s",\n' "${location[$e]}"
  text="${summary[$e]}"
  line=''
  for word in $text; do
    if (( ${#line} + ${#word} + 1 < 21 )); then
      line="$line $word"
    elif (( ${#word} <= 20 )); then
      printf '\t"%s",\n' "${line# }"
      line="$word"
    else
      printf '\t"%s",\n' "${line# }"
      while (( ${#word} > 20 )); do
        printf '\t"%.20s",\n' "$word"
        word="${word#????????????????????}"
      done
      line="$word"
    fi
  done
  printf '\t"%s",\n' "${line# }"
  printf '};\n\n'
done

lday=
for ((i=0; i < N; i++)); do
  e=${sorted[$i]}
  day=$(printf '%(%d)T' "${tstart[$e]}")
  day=${day#0}
  day=$(($day - 8))
  if [[ "$day" != "$lday" ]]; then
    [[ -z "$lday" ]] || printf '};\n\n'
    echo "static const struct event day$day[] = {"
    lday="$day"
  fi
  echo -e "\t{ event$i, ARRAY_SIZE(event$i), },"
done
echo '};'
echo
printf '/* %s: set ft=c: */' vim

# vim: set ft=sh ts=2 sw=2 et:
